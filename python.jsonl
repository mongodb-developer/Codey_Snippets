{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"", "ground_truth": "def connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"", "ground_truth": "    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"\n    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id\n\n    \"\"\" Set the discount field for a customer.\"\"\"", "ground_truth": "    def set_customer_discount(self, _id, discount):\n        customers = self.database.customers\n        return customers.update_one({'_id': _id}, {'$set': {'discount': discount}}).matched_count"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"\n    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id\n\n    \"\"\" Set the discount field for a customer.\"\"\"\n    def set_customer_discount(self, _id, discount):\n        customers = self.database.customers\n        return customers.update_one({'_id': _id}, {'$set': {'discount': discount}}).matched_count\n\n    \"\"\" Get a customer by id and return a JSON string.\"\"\"", "ground_truth": "    def get_customer(self, id):\n        customers = self.database.customers\n        customer = customers.find_one({'_id': id})\n        return json.dumps(customer, default=json_util.default)"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"\n    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id\n\n    \"\"\" Set the discount field for a customer.\"\"\"\n    def set_customer_discount(self, _id, discount):\n        customers = self.database.customers\n        return customers.update_one({'_id': _id}, {'$set': {'discount': discount}}).matched_count\n\n    \"\"\" Get a customer by id and return a JSON string.\"\"\"\n    def get_customer(self, id):\n        customers = self.database.customers\n        customer = customers.find_one({'_id': id})\n        return json.dumps(customer, default=json_util.default)\n\n    \"\"\" Find customers with a discount level lower than the given discount level and return a JSON string.\"\"\"", "ground_truth": "    def find_customers(self, discount_level):\n        customers = self.database.customers\n        customers = customers.find({'discount': {'$lt': discount_level}})\n        return json.dumps(customers, default=json_util.default)"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"\n    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id\n\n    \"\"\" Set the discount field for a customer.\"\"\"\n    def set_customer_discount(self, _id, discount):\n        customers = self.database.customers\n        return customers.update_one({'_id': _id}, {'$set': {'discount': discount}}).matched_count\n\n    \"\"\" Get a customer by id and return a JSON string.\"\"\"\n    def get_customer(self, id):\n        customers = self.database.customers\n        customer = customers.find_one({'_id': id})\n        return json.dumps(customer, default=json_util.default)\n\n    \"\"\" Find customers with a discount level lower than the given discount level and return a JSON string.\"\"\"\n    def find_customers(self, discount_level):\n        customers = self.database.customers\n        customers = customers.find({'discount': {'$lt': discount_level}})\n        return json.dumps(customers, default=json_util.default)\n\n    \"\"\" Delete a customer by id.\"\"\"", "ground_truth": "    def delete_customer(self, id):\n        customers = self.database.customers\n        customers.delete_one({'_id': id})"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"\n    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id\n\n    \"\"\" Set the discount field for a customer.\"\"\"\n    def set_customer_discount(self, _id, discount):\n        customers = self.database.customers\n        return customers.update_one({'_id': _id}, {'$set': {'discount': discount}}).matched_count\n\n    \"\"\" Get a customer by id and return a JSON string.\"\"\"\n    def get_customer(self, id):\n        customers = self.database.customers\n        customer = customers.find_one({'_id': id})\n        return json.dumps(customer, default=json_util.default)\n\n    \"\"\" Find customers with a discount level lower than the given discount level and return a JSON string.\"\"\"\n    def find_customers(self, discount_level):\n        customers = self.database.customers\n        customers = customers.find({'discount': {'$lt': discount_level}})\n        return json.dumps(customers, default=json_util.default)\n\n    \"\"\" Delete a customer by id.\"\"\"\n    def delete_customer(self, id):\n        customers = self.database.customers\n        customers.delete_one({'_id': id})\n\n    \"\"\" Add a purchase to a customer.\"\"\"", "ground_truth": "    def add_purchase(self, id, purchase):\n        customers = self.database.customers\n        if customers.update_one({'_id': id}, {'$push': {'purchases': purchase}}).matched_count == 0:\n            raise Exception('No customer found with id ' + id)"}
{"prompt": "import datetime\nimport json\n\nimport pymongo\nfrom bson import json_util\n\n\"\"\" Connect to MongoDB and ping the server.\"\"\"\ndef connect(url):\n    client = pymongo.MongoClient(url)\n    if client.admin.command('ping')['ok'] != 1:\n        raise Exception(\"Error connecting to MongoDB\")\n    return client\n\nclass CustomerDataAccessObject:\n\n    def __init__(self, database):\n        self.database = database\n\n    \"\"\" Parse customer JSON string, and store in the customers collection.\"\"\"\n    def add_new_customer(self, customer_json):\n        customer = json.loads(customer_json)\n        customer['date_of_birth'] = datetime.datetime.strptime(customer['date_of_birth'], '%Y-%m-%d').date()\n        customer['last_seen'] = datetime.datetime.strptime(customer['last_seen'], '%Y-%m-%d').date()\n        customer_dict = {\n            'name': customer['name'],\n            'date_of_birth': customer['date_of_birth'],\n            'last_seen': customer['last_seen'],\n            'zip_code': customer['zip_code']\n        }\n        customers = self.database.customers\n        return customers.insert_one(customer_dict).inserted_id\n\n    \"\"\" Set the discount field for a customer.\"\"\"\n    def set_customer_discount(self, _id, discount):\n        customers = self.database.customers\n        return customers.update_one({'_id': _id}, {'$set': {'discount': discount}}).matched_count\n\n    \"\"\" Get a customer by id and return a JSON string.\"\"\"\n    def get_customer(self, id):\n        customers = self.database.customers\n        customer = customers.find_one({'_id': id})\n        return json.dumps(customer, default=json_util.default)\n\n    \"\"\" Find customers with a discount level lower than the given discount level and return a JSON string.\"\"\"\n    def find_customers(self, discount_level):\n        customers = self.database.customers\n        customers = customers.find({'discount': {'$lt': discount_level}})\n        return json.dumps(customers, default=json_util.default)\n\n    \"\"\" Delete a customer by id.\"\"\"\n    def delete_customer(self, id):\n        customers = self.database.customers\n        customers.delete_one({'_id': id})\n\n    \"\"\" Add a purchase to a customer.\"\"\"\n    def add_purchase(self, id, purchase):\n        customers = self.database.customers\n        if customers.update_one({'_id': id}, {'$push': {'purchases': purchase}}).matched_count == 0:\n            raise Exception('No customer found with id ' + id)\n\n    \"\"\" Calculate the total purchases for each customer, and return a JSON string. \"\"\"", "ground_truth": "    def tally_purchases(self):\n        customers = self.database.customers\n        purchases = customers.aggregate([\n            {\n                '$project': {\n                    'purchases_total': {\n                        '$sum': '$purchases.price'\n                    }\n                }\n            }\n        ])\n        return json.dumps(purchases, default=json_util.default)"}
