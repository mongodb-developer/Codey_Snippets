{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable", "ground_truth": "\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}"}
{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable\n\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Write a method that takes a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlingsake a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlings", "ground_truth": "\tpublic string InsertCustomer(string json)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar document = new BsonDocument();\n\t\t\tdocument.AddRange(BsonDocument.Parse(json));\n\t\t\tcollection.InsertOne(document);\n\t\t\treturn document[\"_id\"].ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t\t\treturn e.Message;\n\t\t}\n\t}"}
{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable\n\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Write a method that takes a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlingsake a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlings\n\tpublic string InsertCustomer(string json)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar document = new BsonDocument();\n\t\t\tdocument.AddRange(BsonDocument.Parse(json));\n\t\t\tcollection.InsertOne(document);\n\t\t\treturn document[\"_id\"].ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Take an _id and set the customer discount level", "ground_truth": "\tpublic string SetCustomerDiscount(string id, int discount)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\tUpdateDefinition<BsonDocument> update = Builders<BsonDocument>.Update.Set(\"discount\", discount);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.UpdateOne(filter, update);\n\t\t\treturn result.ModifiedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}"}
{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable\n\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Write a method that takes a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlingsake a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlings\n\tpublic string InsertCustomer(string json)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar document = new BsonDocument();\n\t\t\tdocument.AddRange(BsonDocument.Parse(json));\n\t\t\tcollection.InsertOne(document);\n\t\t\treturn document[\"_id\"].ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Take an _id and set the customer discount level\n\tpublic string SetCustomerDiscount(string id, int discount)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\tUpdateDefinition<BsonDocument> update = Builders<BsonDocument>.Update.Set(\"discount\", discount);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.UpdateOne(filter, update);\n\t\t\treturn result.ModifiedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Find a customer by id", "ground_truth": "\tpublic BsonDocument FindCustomerById(string id)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.Find(filter).FirstOrDefault();\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}"}
{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable\n\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Write a method that takes a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlingsake a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlings\n\tpublic string InsertCustomer(string json)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar document = new BsonDocument();\n\t\t\tdocument.AddRange(BsonDocument.Parse(json));\n\t\t\tcollection.InsertOne(document);\n\t\t\treturn document[\"_id\"].ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Take an _id and set the customer discount level\n\tpublic string SetCustomerDiscount(string id, int discount)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\tUpdateDefinition<BsonDocument> update = Builders<BsonDocument>.Update.Set(\"discount\", discount);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.UpdateOne(filter, update);\n\t\t\treturn result.ModifiedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Find a customer by id\n\tpublic BsonDocument FindCustomerById(string id)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.Find(filter).FirstOrDefault();\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Find customers with a discount level lower than given discountLevel", "ground_truth": "\tpublic List<BsonDocument> FindCustomersWithDiscountLevel(int discountLevel)\n\t{\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Lt(\"discountLevel\", discountLevel);\n\t\treturn collection.Find(filter).ToList();\n\t}"}
{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable\n\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Write a method that takes a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlingsake a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlings\n\tpublic string InsertCustomer(string json)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar document = new BsonDocument();\n\t\t\tdocument.AddRange(BsonDocument.Parse(json));\n\t\t\tcollection.InsertOne(document);\n\t\t\treturn document[\"_id\"].ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Take an _id and set the customer discount level\n\tpublic string SetCustomerDiscount(string id, int discount)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\tUpdateDefinition<BsonDocument> update = Builders<BsonDocument>.Update.Set(\"discount\", discount);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.UpdateOne(filter, update);\n\t\t\treturn result.ModifiedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Find a customer by id\n\tpublic BsonDocument FindCustomerById(string id)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.Find(filter).FirstOrDefault();\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Find customers with a discount level lower than given discountLevel\n\tpublic List<BsonDocument> FindCustomersWithDiscountLevel(int discountLevel)\n\t{\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Lt(\"discountLevel\", discountLevel);\n\t\treturn collection.Find(filter).ToList();\n\t}\n\n\t// Delete a customer by _id", "ground_truth": "\tpublic string DeleteCustomerById(string id)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.DeleteOne(filter);\n\t\t\treturn result.DeletedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}"}
{"prompt": "using MongoDB.Driver;\nusing MongoDB.Bson;\nusing MongoDB.Bson.IO;\nusing System.Globalization;\n\nnamespace CWCSharp;\npublic class MongoService\n{\n\tMongoClient? mongoClient;\n\tIMongoDatabase? database;\n\tIMongoCollection<BsonDocument>? collection;\n\n\tpublic MongoService(string uri, string databaseName, string collectionName)\n\t{\n\t\tConnectToMongoDB(uri);\n\t\tdatabase = mongoClient.GetDatabase(databaseName);\n\t\tcollection = database.GetCollection<BsonDocument>(collectionName);\n\t}\n\n\t// Make a connection to MongoDB using a URI and ping the connection to ensure it works, store the result in a class variable\n\tpublic string ConnectToMongoDB(string uri)\n\t{\n\t\tMongoClientSettings settings = MongoClientSettings.FromConnectionString(uri);\n\t\tsettings.ApplicationName = \"CWCSharp\";\n\t\tmongoClient = new MongoClient(settings);\n\t\ttry\n\t\t{\n\t\t\tvar result = mongoClient.GetDatabase(\"admin\").RunCommand<BsonDocument>(new BsonDocument(\"ping\", 1));\n\t\t\treturn result.ToJson();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Write a method that takes a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlingsake a JSON document as a String and store it in MongoDB in a customers collection returning the _id with error handlings\n\tpublic string InsertCustomer(string json)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar document = new BsonDocument();\n\t\t\tdocument.AddRange(BsonDocument.Parse(json));\n\t\t\tcollection.InsertOne(document);\n\t\t\treturn document[\"_id\"].ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(\"Error: \" + e.Message);\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Take an _id and set the customer discount level\n\tpublic string SetCustomerDiscount(string id, int discount)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\tUpdateDefinition<BsonDocument> update = Builders<BsonDocument>.Update.Set(\"discount\", discount);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.UpdateOne(filter, update);\n\t\t\treturn result.ModifiedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Find a customer by id\n\tpublic BsonDocument FindCustomerById(string id)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.Find(filter).FirstOrDefault();\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Find customers with a discount level lower than given discountLevel\n\tpublic List<BsonDocument> FindCustomersWithDiscountLevel(int discountLevel)\n\t{\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Lt(\"discountLevel\", discountLevel);\n\t\treturn collection.Find(filter).ToList();\n\t}\n\n\t// Delete a customer by _id\n\tpublic string DeleteCustomerById(string id)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.DeleteOne(filter);\n\t\t\treturn result.DeletedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}\n\n\t// Update a customer an add a purchase by pushing to the purchases array", "ground_truth": "\tpublic string AddPurchase(string id, string purchase)\n\t{\n\t\tObjectId _id = new ObjectId(id);\n\t\tFilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq(\"_id\", _id);\n\t\tvar updatedArray = BsonDocument.Parse(purchase);\n\t\tUpdateDefinition<BsonDocument> update = Builders<BsonDocument>.Update.Push(\"purchases\", updatedArray);\n\t\ttry\n\t\t{\n\t\t\tvar result = collection.UpdateOne(filter, update);\n\t\t\treturn result.ModifiedCount.ToString();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\treturn e.Message;\n\t\t}\n\t}"}
